#!/usr/bin/env node
/**
 * scripts/gen-sample-data.js
 *
 * Uses ts-node to import your TS entities config,
 * then faker to emit src/app/data/sample.ts
 */

require('ts-node').register({
  // project: './tsconfig.json',
})

const fs = require('fs')
const path = require('path')
const { faker } = require('@faker-js/faker')

// 1) Import your TS config directly
const { entities } = require(path.resolve(__dirname, '../src/app/config/entities.ts'))

// 2) Heuristic Faker by field name
function fakeValue(field) {
  const f = field.toLowerCase()

  if (f === 'id' || f.endsWith('_id')) {
    // use faker.number.int for integers
    return faker.number.int({ min: 1, max: 1000 })
  }
  if (f.includes('first_name')) return faker.person.firstName()
  if (f.includes('last_name'))  return faker.person.lastName()
  if (f.includes('email'))      return faker.internet.email()
  if (f.includes('phone'))      return faker.phone.number()
  if (f.includes('price') || f.includes('amount') || f.includes('total')) {
    // use faker.number.float for floats
    return faker.number.float({ min: 1, max: 200, precision: 0.01 })
  }
  if (f.endsWith('_at') || f.includes('date')) {
    return faker.date.recent().toISOString()
  }
  if (['status', 'type'].includes(f)) {
    return faker.helpers.arrayElement(['pending','active','served','paid','free','occupied'])
  }
  if (f.startsWith('is_') || f.startsWith('has_')) {
    return faker.datatype.boolean()
  }
  if (f.includes('description') || f.includes('note') || f.includes('message')) {
    return faker.lorem.sentence()
  }
  // fallback to a single word
  return faker.word.noun()
}

// 3) Build 5 rows per resource
const OUT = {}
for (const [resource, cfg] of Object.entries(entities)) {
  OUT[resource] = Array.from({ length: 5 }, () => {
    const row = {}
    cfg.fields.forEach((field) => {
      row[field] = fakeValue(field)
    })
    return row
  })
}

// 4) Write out sample.ts
const outPath = path.resolve(__dirname, '../src/app/data/sample.ts')
fs.mkdirSync(path.dirname(outPath), { recursive: true })

// Define the SampleData interface to be included in the generated file
const sampleDataInterface = `// Define a type for the structure of your sample data
export interface SampleData {
  [key: string]: Array<Record<string, any>>; // Each key maps to an array of objects
}\n\n`;

const fileContent = `// AUTO-GENERATED by scripts/gen-sample-data.js — DO NOT EDIT\n\n` +
  sampleDataInterface + // Include the interface definition
  `export const sampleData: SampleData = ${JSON.stringify(OUT, null, 2)}\n`; // Use the SampleData type

fs.writeFileSync(outPath, fileContent, 'utf-8');
console.log('✅ Sample data written to', outPath);
