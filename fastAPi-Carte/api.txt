Here's a comprehensive reference of all backend models, endpoints, and data formats:

## üóÇ **Backend Models & Data Structures**

### **Core Models** (`app/models/core.py`)

#### **Food & Recipes**
```python
class Food(MongoModel):
    name: str
    description: str
    price: float
    category_id: str
    image_url: Optional[str] = None
    preparation_time: Optional[int] = None
    allergens: Optional[List[str]] = []
    tenant_id: str
    recipes: Optional[List[RecipeItem]] = []
    store_id: Optional[str] = None
    is_available: Optional[bool] = True

class RecipeItem(MongoModel):
    id: Optional[str] = None
    food_id: str
    inventory_product_id: str
    quantity_used: float
    unit_of_measure: str
    created_at: Optional[str] = None
    updated_at: Optional[str] = None

class StoreFood(MongoModel):
    food_id: str
    store_id: str
    is_available: bool = True
```

#### **Orders & Payments**
```python
class Order(MongoModel):
    store_id: Optional[str] = None
    table_id: Optional[str] = None
    customer_id: Optional[str] = None
    total_amount: float
    status: str
    notes: str
    items: List[OrderItem] = []
    subtotal_amount: float
    tax_amount: float
    discount_amount: float
    employee_id: Optional[str] = None
    order_type: Optional[str] = None
    payment_status: Optional[str] = None
    payment_method: Optional[str] = None
    created_at: Optional[str] = None
    updated_at: Optional[str] = None

class OrderItem(MongoModel):
    id: Optional[str] = None
    order_id: str
    food_id: str
    quantity: int
    price: float
    sub_total: float
    notes: Optional[str] = None
    name: str
    price_at_sale: float
    created_at: Optional[str] = None
    updated_at: Optional[str] = None

class Payment(MongoModel):
    order_id: str
    payment_method_id: str
    amount: float
    payment_date: str
    transaction_id: Optional[str] = None
    status: str
    created_at: Optional[str] = None
    updated_at: Optional[str] = None
```

#### **Business Entities**
```python
class Category(MongoModel):
    name: str
    description: Optional[str] = None
    store_id: Optional[str] = None
    created_at: Optional[str] = None
    updated_at: Optional[str] = None

class Customer(MongoModel):
    first_name: str
    last_name: Optional[str] = None
    email: Optional[EmailStr] = None
    phone_number: Optional[str] = None
    loyalty_points: Optional[int] = 0
    store_id: str
    created_at: Optional[str] = None
    updated_at: Optional[str] = None

class Table(MongoModel):
    name: str
    capacity: int
    location: str
    status: str
    current_order_id: Optional[str] = None
    store_id: str
    created_at: Optional[str] = None
    updated_at: Optional[str] = None

class Store(MongoModel):
    name: str
    address: str
    phone: str
    email: str
    tenant_id: str
    location: Optional[str] = None
    manager_id: Optional[str] = None
    kiosk_user_id: Optional[str] = None
    created_at: Optional[str] = None
    updated_at: Optional[str] = None
```

#### **Inventory & Purchasing**
```python
class PurchaseOrder(MongoModel):
    po_number: str
    supplier_id: str
    site_id: str
    status: str
    order_date: str
    expected_delivery_date: str
    total_amount: float
    ordered_by: str
    notes: Optional[str] = None
    items: List[PurchaseOrderItem] = []
    created_at: Optional[str] = None
    updated_at: Optional[str] = None

class GoodsReceipt(MongoModel):
    receipt_number: str
    purchase_order_id: str
    store_id: str
    receipt_date: str
    received_by: str
    items: List[GoodsReceiptItem] = []
    receiving_bin_id: Optional[str] = None
    status: Optional[str] = None
    received_items: Optional[List[Dict]] = None
    created_at: Optional[str] = None
    updated_at: Optional[str] = None
```

#### **System Entities**
```python
class User(MongoModel):
    name: Optional[str] = None
    email: EmailStr
    username: str
    first_name: Optional[str] = None
    last_name: Optional[str] = None
    password: Optional[str] = None
    email_verified_at: Optional[str] = None
    remember_token: Optional[str] = None
    cashAccounts: Optional[List[Any]] = []
    cardAccounts: Optional[List[Any]] = []
    onlineAccounts: Optional[List[Any]] = []
    gpayAccounts: Optional[List[Any]] = []
    phonepeAccounts: Optional[List[Any]] = []
    amazonpayAccounts: Optional[List[Any]] = []
    locations: Optional[List[Any]] = []
    created_at: Optional[str] = None
    updated_at: Optional[str] = None

class Tenant(MongoModel):
    name: str
    email: str
    password: str
    remember_token: Optional[str] = None
    phone: Optional[str] = None
    address: Optional[str] = None
    created_at: Optional[str] = None
    updated_at: Optional[str] = None
```

### **HR Models** (`app/models/hr.py`)

#### **Employee & Roles**
```python
class Employee(MongoModel):
    user_id: str
    job_title_id: str
    access_role_ids: List[str]
    tenant_id: str
    store_id: str
    main_access_role_id: str
    hire_date: str
    salary: float
    first_name: str
    last_name: Optional[str] = None
    avatar_url: Optional[str] = None
    employee_id: Optional[str] = None
    full_name: Optional[str] = None
    middle_name: Optional[str] = None
    suffix: Optional[str] = None
    profile_photo_url: Optional[str] = None
    personal_details: Optional[PersonalDetails] = None
    contact_details: Optional[ContactDetails] = None
    employment_details: Optional[EmploymentDetails] = None
    status: Optional[EmployeeStatus] = None
    created_at: Optional[str] = None
    updated_at: Optional[str] = None

class AccessRole(MongoModel):
    name: str
    description: str
    permissions: List[str]
    landing_page: str
    created_at: Optional[str] = None
    updated_at: Optional[str] = None

class Department(MongoModel):
    name: str
    store_id: str
    created_at: Optional[str] = None
    updated_at: Optional[str] = None
```

#### **Time & Payroll**
```python
class Shift(MongoModel):
    employee_id: str
    start: str
    end: str
    title: Optional[str] = None
    employee_name: Optional[str] = None
    color: Optional[str] = None
    active: Optional[bool] = True
    recurring: Optional[bool] = False
    created_at: Optional[str] = None
    updated_at: Optional[str] = None

class TimesheetEntry(MongoModel):
    employee_id: str
    clock_in: str
    clock_out: Optional[str] = None
    duration_minutes: Optional[int] = 0
    store_id: str
    created_at: Optional[str] = None
    updated_at: Optional[str] = None

class Payroll(MongoModel):
    employee_id: str
    pay_period_start: str
    pay_period_end: str
    payment_cycle: str
    gross_pay: float
    tax_deductions: float
    net_pay: float
    status: str
    hours_worked: float
    overtime_hours: float
    overtime_rate: float
    deductions: Optional[List[PayrollDeduction]] = []
    store_id: str
    created_at: Optional[str] = None
    updated_at: Optional[str] = None
```

### **Inventory Models** (`app/models/inventory.py`)

```python
class InventoryProduct(MongoModel):
    name: str
    description: Optional[str] = None
    sku: str
    unit_of_measure: str
    tenant_id: str
    unit_cost: float
    quantity_in_stock: float
    reorder_level: float
    supplier_id: Optional[str] = None
    inv_category_id: Optional[str] = None
    location_in_warehouse: Optional[str] = None
    last_restocked_at: Optional[str] = None
    store_id: Optional[str] = None
    created_at: Optional[str] = None
    updated_at: Optional[str] = None

class Supplier(MongoModel):
    name: str
    contact_person: str
    phone: str
    email: str
    address: str
    created_at: Optional[str] = None
    updated_at: Optional[str] = None

class Unit(MongoModel):
    name: str
    symbol: str
    created_at: Optional[str] = None
    updated_at: Optional[str] = None
```

## üåê **API Endpoints Reference**

### **Standard Response Format**
```typescript
interface StandardResponse<T = any> {
  code: number;
  message: string;
  data?: T;
}
```

### **Authentication Endpoints** (`/api/auth`)

| Method | Endpoint | Request Body | Response Data | Description |
|--------|----------|--------------|---------------|-------------|
| POST | `/login` | `{username, password}` | `{access_token, token_type, employee}` | Employee login |
| POST | `/register` | `Employee` | `Employee` | Register employee |
| GET | `/employees/me` | - | `Employee` | Get current employee |
| POST | `/logout` | - | `{message}` | Logout |
| POST | `/refresh-token` | - | `{access_token, token_type, employee}` | Refresh token |
| GET | `/verify-token` | - | `{valid, employee_id, store_id}` | Verify token |
| POST | `/forgot-password` | `{email}` | `{message}` | Forgot password |
| POST | `/reset-password` | `{token, new_password}` | `{message}` | Reset password |

### **Core POS Endpoints** (`/api/core`)

#### **Foods**
| Method | Endpoint | Request Body | Response Data | Description |
|--------|----------|--------------|---------------|-------------|
| GET | `/foods` | - | `Food[]` | Get all foods |
| GET | `/foods/{id}` | - | `Food` | Get food by ID |
| POST | `/foods` | `Food` | `Food` | Create food |
| PUT | `/foods/{id}` | `Food` | `Food` | Update food |
| DELETE | `/foods/{id}` | - | `{message}` | Delete food |

#### **Orders**
| Method | Endpoint | Request Body | Response Data | Description |
|--------|----------|--------------|---------------|-------------|
| GET | `/orders` | - | `Order[]` | Get all orders |
| GET | `/orders/{id}` | - | `Order` | Get order by ID |
| POST | `/orders` | `Order` | `Order` | Create order |
| PUT | `/orders/{id}` | `Order` | `Order` | Update order |
| DELETE | `/orders/{id}` | - | `{message}` | Delete order |

#### **Categories**
| Method | Endpoint | Request Body | Response Data | Description |
|--------|----------|--------------|---------------|-------------|
| GET | `/categories` | - | `Category[]` | Get all categories |
| GET | `/categories/{id}` | - | `Category` | Get category by ID |
| POST | `/categories` | `Category` | `Category` | Create category |
| PUT | `/categories/{id}` | `Category` | `Category` | Update category |
| DELETE | `/categories/{id}` | - | `{message}` | Delete category |

#### **Customers, Tables, Stores**
| Method | Endpoint | Request Body | Response Data | Description |
|--------|----------|--------------|---------------|-------------|
| GET | `/customers` | - | `Customer[]` | Get all customers |
| POST | `/customers` | `Customer` | `Customer` | Create customer |
| GET | `/tables` | - | `Table[]` | Get all tables |
| POST | `/tables` | `Table` | `Table` | Create table |
| GET | `/stores` | - | `Store[]` | Get all stores |
| POST | `/stores` | `Store` | `Store` | Create store |

### **HR Endpoints** (`/api/hr`)

#### **Employees & Departments**
| Method | Endpoint | Request Body | Response Data | Description |
|--------|----------|--------------|---------------|-------------|
| GET | `/employees` | - | `Employee[]` | Get all employees |
| POST | `/employees` | `Employee` | `Employee` | Create employee |
| GET | `/departments` | - | `Department[]` | Get all departments |
| POST | `/departments` | `Department` | `Department` | Create department |

#### **Shifts & Timekeeping**
| Method | Endpoint | Request Body | Response Data | Description |
|--------|----------|--------------|---------------|-------------|
| GET | `/shifts` | - | `Shift[]` | Get all shifts |
| POST | `/shifts` | `Shift` | `Shift` | Create shift |
| PUT | `/shifts/{id}/status` | `{active: boolean}` | `Shift` | Update shift status |
| POST | `/timesheet_entries/clock-in` | `{employee_id, store_id}` | `TimesheetEntry` | Clock in |
| POST | `/timesheet_entries/{id}/clock-out` | - | `TimesheetEntry` | Clock out |

#### **Payroll**
| Method | Endpoint | Request Body | Response Data | Description |
|--------|----------|--------------|---------------|-------------|
| GET | `/payroll` | - | `Payroll[]` | Get payroll entries |
| POST | `/payroll` | `Payroll` | `Payroll` | Create payroll |
| POST | `/payroll/calculate` | `{employee_id, period_start, period_end}` | `Payroll` | Calculate payroll |
| POST | `/payroll/{id}/process` | - | `Payroll` | Process payroll |

### **Inventory Endpoints** (`/api/inventory`)

#### **Products & Suppliers**
| Method | Endpoint | Request Body | Response Data | Description |
|--------|----------|--------------|---------------|-------------|
| GET | `/inventory_products` | - | `InventoryProduct[]` | Get all products |
| POST | `/inventory_products` | `InventoryProduct` | `InventoryProduct` | Create product |
| GET | `/suppliers` | - | `Supplier[]` | Get all suppliers |
| POST | `/suppliers` | `Supplier` | `Supplier` | Create supplier |

#### **Purchase Orders & Receipts**
| Method | Endpoint | Request Body | Response Data | Description |
|--------|----------|--------------|---------------|-------------|
| GET | `/purchase_orders` | - | `PurchaseOrder[]` | Get all POs |
| POST | `/purchase_orders` | `PurchaseOrder` | `PurchaseOrder` | Create PO |
| GET | `/goods_receipts` | - | `GoodsReceipt[]` | Get all receipts |
| POST | `/goods_receipts` | `GoodsReceipt` | `GoodsReceipt` | Create receipt |

#### **Stock Management**
| Method | Endpoint | Request Body | Response Data | Description |
|--------|----------|--------------|---------------|-------------|
| GET | `/inventory/low-stock` | - | `InventoryProduct[]` | Get low stock items |
| POST | `/inventory_products/{id}/update-stock` | `{quantity_change, reason}` | `{message, product_id, new_stock}` | Update stock |

### **Utility Endpoints**

| Method | Endpoint | Response Data | Description |
|--------|----------|---------------|-------------|
| GET | `/health` | `{status, module}` | Health check |
| GET | `/debug/users` | `User[]` | Debug users |
| GET | `/purchase_orders/pending` | `PurchaseOrder[]` | Pending POs |

## üîÑ **Data Flow Examples**

### **Login Response**
```typescript
// POST /api/login
Response: {
  code: 200,
  message: "success",
  data: {
    access_token: "jwt_token_here",
    token_type: "bearer",
    employee: {
      id: "emp_123",
      first_name: "John",
      last_name: "Doe",
      email: "john@example.com",
      store_id: "store_123",
      main_access_role: {
        id: "role_1",
        name: "Manager",
        permissions: ["read", "write"],
        landing_page: "/dashboard"
      },
      access_roles: [...],
      // ... other employee fields
    }
  }
}
```

### **Order Creation**
```typescript
// POST /api/orders
Request: {
  store_id: "store_123",
  table_id: "table_1",
  items: [
    {
      food_id: "food_123",
      quantity: 2,
      price: 25.99,
      name: "Burger",
      price_at_sale: 25.99
    }
  ],
  total_amount: 51.98,
  status: "pending"
}

Response: {
  code: 201,
  message: "Order created successfully",
  data: {
    id: "order_123",
    store_id: "store_123",
    items: [...],
    total_amount: 51.98,
    status: "pending",
    created_at: "2024-01-15T10:30:00Z"
    // ... plus any stock warnings
  }
}
```

### **Employee with Enriched Data**
```typescript
// GET /api/employees/me
Response: {
  code: 200,
  message: "success",
  data: {
    id: "emp_123",
    first_name: "John",
    last_name: "Doe",
    store_id: "store_123",
    main_access_role_id: "role_1",
    // Enriched data from _fetch_and_enrich_employee_data:
    main_access_role: {
      id: "role_1",
      name: "Manager",
      description: "Store Manager",
      permissions: ["orders:read", "orders:write", "reports:read"],
      landing_page: "/dashboard"
    },
    access_roles: [
      {
        id: "role_2", 
        name: "Cashier",
        permissions: ["orders:read", "orders:write"],
        landing_page: "/pos"
      }
    ]
  }
}
```

## üìã **Key Data Types**

| Field Type | Python | TypeScript | Example |
|------------|--------|------------|---------|
| ID | `str` (ObjectId) | `string` | `"507f1f77bcf86cd799439011"` |
| Date/Time | `str` (ISO) | `string` | `"2024-01-15T10:30:00Z"` |
| Money | `float` | `number` | `25.99` |
| Boolean | `bool` | `boolean` | `true` |
| List | `List[Type]` | `Type[]` | `["perm1", "perm2"]` |
| Optional | `Optional[Type]` | `Type \| undefined` | `undefined` |

This comprehensive reference should help you maintain consistency between frontend and backend data structures!